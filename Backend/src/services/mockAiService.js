/**
 * Mock AI Service for testing and development
 * Used when real AI APIs are unavailable due to rate limits or configuration issues
 */

export class MockAIService {
  generateTestCaseSummaries(files) {
    console.log('ðŸŽ­ Using Mock AI Service for test summaries');
    
    return files.flatMap((file, fileIndex) => {
      const baseName = file.path.split('/').pop().replace(/\.[^/.]+$/, '');
      
      return [
        {
          id: `mock-test-${fileIndex}-1`,
          title: `Should validate ${baseName} inputs correctly`,
          description: `Test that the ${baseName} module correctly validates all input parameters and returns appropriate error messages for invalid inputs`,
          type: 'unit',
          file: file.path,
          priority: 'high',
          complexity: 'simple'
        },
        {
          id: `mock-test-${fileIndex}-2`,
          title: `Should handle ${baseName} edge cases`,
          description: `Test edge cases and boundary conditions for the ${baseName} module including null, undefined, and extreme values`,
          type: 'unit',
          file: file.path,
          priority: 'medium',
          complexity: 'medium'
        },
        {
          id: `mock-test-${fileIndex}-3`,
          title: `Should perform ${baseName} error handling`,
          description: `Test that the ${baseName} module properly handles and propagates errors with meaningful error messages`,
          type: 'unit',
          file: file.path,
          priority: 'high',
          complexity: 'simple'
        }
      ];
    });
  }

  generateTestCode(testSummary, fileContent, framework = 'jest') {
    console.log('ðŸŽ­ Using Mock AI Service for test code generation');
    
    const fileName = this.generateFileName(testSummary.file, framework);
    const content = this.generateMockTestContent(testSummary, framework);
    
    return {
      fileName,
      content,
      framework
    };
  }

  generateFileName(sourceFile, framework) {
    const baseName = sourceFile.split('/').pop().replace(/\.[^/.]+$/, '');
    const extension = sourceFile.includes('.ts') ? '.ts' : '.js';
    
    if (framework === 'jest' || framework === 'vitest') {
      return `${baseName}.test${extension}`;
    } else if (framework === 'pytest') {
      return `test_${baseName}.py`;
    } else {
      return `${baseName}_test${extension}`;
    }
  }

  generateMockTestContent(testSummary, framework) {
    const baseName = testSummary.file.split('/').pop().replace(/\.[^/.]+$/, '');
    
    if (framework === 'jest' || framework === 'vitest') {
      return `import { ${baseName} } from '${testSummary.file.replace(/\.[^/.]+$/, '')}';

describe('${testSummary.title}', () => {
  test('${testSummary.description}', () => {
    // Test implementation for: ${testSummary.title}
    // TODO: Add actual test logic based on the source file
    
    // Example test cases:
    expect(true).toBe(true);
    
    // Add more specific tests for:
    // - Valid inputs
    // - Invalid inputs  
    // - Edge cases
    // - Error handling
  });

  test('should handle edge cases', () => {
    // Test edge cases and boundary conditions
    expect(() => {
      // Test error conditions
    }).toThrow();
  });

  test('should validate input parameters', () => {
    // Test input validation
    expect(true).toBeTruthy();
  });
});

// Generated by TestCraft AI (Mock Mode)
// Priority: ${testSummary.priority}
// Complexity: ${testSummary.complexity}
// Type: ${testSummary.type}`;
    } else {
      return `# Test file for ${baseName}
# Generated by TestCraft AI (Mock Mode)

def test_${baseName.toLowerCase()}_functionality():
    """${testSummary.description}"""
    # TODO: Implement actual test logic
    assert True

def test_${baseName.toLowerCase()}_edge_cases():
    """Test edge cases and boundary conditions"""
    # TODO: Add edge case tests
    assert True

def test_${baseName.toLowerCase()}_error_handling():
    """Test error handling scenarios"""
    # TODO: Add error handling tests
    assert True
`;
    }
  }
}

export default new MockAIService(); 